
// Copyright (C) 2024 - DevSH Graphics Programming Sp. z O.O.
// This autogenerated file is part of the "Nabla Engine".
// This file was created using Spirv HLSL intrinsics generator
// For conditions of distribution and use, see copyright notice in nabla.h


#ifndef _EXAMPLE_OUTPUT_EXAMPLE_INTRISINCS_CORE_HLSL_INCLUDED_
#define _EXAMPLE_OUTPUT_EXAMPLE_INTRISINCS_CORE_HLSL_INCLUDED_


#ifdef __HLSL_VERSION
#include "spirv/unified1/spirv.hpp"
#include "spirv/unified1/GLSL.std.450.h"
#endif


namespace nbl
{
namespace hlsl
{
#ifdef __HLSL_VERSION
namespace spirv
{
// Built-ins

// Capabilities:
// Shader
[[vk::ext_builtin_input(spv::BuiltInPosition)]]
static float32_t4 Position;

// Capabilities:
// Shader
[[vk::ext_builtin_input(spv::BuiltInHelperInvocation)]]
static const uint32_t HelperInvocation;

[[vk::ext_builtin_input(spv::BuiltInNumWorkgroups)]]
static const uint32_t NumWorkgroups;

[[vk::ext_builtin_input(spv::BuiltInWorkgroupId)]]
static const uint32_t WorkgroupId;

[[vk::ext_builtin_input(spv::BuiltInLocalInvocationId)]]
static const uint32_t LocalInvocationId;

[[vk::ext_builtin_input(spv::BuiltInGlobalInvocationId)]]
static const uint32_t GlobalInvocationId;

[[vk::ext_builtin_input(spv::BuiltInLocalInvocationIndex)]]
static const uint32_t LocalInvocationIndex;

// Capabilities:
// Shader
[[vk::ext_builtin_input(spv::BuiltInVertexIndex)]]
static const uint32_t VertexIndex;

// Capabilities:
// Shader
[[vk::ext_builtin_input(spv::BuiltInInstanceIndex)]]
static const uint32_t InstanceIndex;



// Class 'Non-Uniform'
// OpGroupNonUniformFAdd
[[vk::ext_instruction(spv::OpGroupNonUniformFAdd)]]
uint32_t GroupNonUniformFAdd(uint32_t Execution, uint32_t Operation, uint32_t Value);
[[vk::ext_instruction(spv::OpGroupNonUniformFAdd)]]
uint32_t GroupNonUniformFAdd(uint32_t Execution, uint32_t Operation, uint32_t Value, uint32_t ClusterSize);

// Class 'Bit'
// OpBitFieldSExtract
[[vk::ext_instruction(spv::OpBitFieldSExtract)]]
uint32_t BitFieldSExtract(uint32_t Base, uint32_t Offset, uint32_t Count);

// OpBitFieldUExtract
[[vk::ext_instruction(spv::OpBitFieldUExtract)]]
uint32_t BitFieldUExtract(uint32_t Base, uint32_t Offset, uint32_t Count);



}
#endif
}
}

#endif

